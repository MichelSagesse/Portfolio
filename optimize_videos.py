#!/usr/bin/env python3
"""
Script d'optimisation des vid√©os pour le portfolio
Optimise automatiquement les vid√©os MP4 pour le web
"""

import os
import subprocess
import sys
from pathlib import Path

def check_ffmpeg():
    """V√©rifie si FFmpeg est install√©"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def optimize_video(input_path, output_path, crf=23, preset='medium'):
    """
    Optimise une vid√©o avec FFmpeg
    
    Args:
        input_path (str): Chemin vers la vid√©o d'entr√©e
        output_path (str): Chemin vers la vid√©o optimis√©e
        crf (int): Constante Rate Factor (18-28, plus bas = meilleure qualit√©)
        preset (str): Preset de compression (ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow)
    """
    cmd = [
        'ffmpeg',
        '-i', input_path,
        '-c:v', 'libx264',
        '-crf', str(crf),
        '-preset', preset,
        '-c:a', 'aac',
        '-b:a', '128k',
        '-movflags', '+faststart',
        '-y',  # √âcraser le fichier de sortie s'il existe
        output_path
    ]
    
    try:
        print(f"Optimisation de {input_path}...")
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f" Vid√©o optimis√©e : {output_path}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Erreur lors de l'optimisation de {input_path}: {e}")
        print(f"Sortie d'erreur: {e.stderr}")
        return False

def get_file_size_mb(file_path):
    """Retourne la taille du fichier en MB"""
    if os.path.exists(file_path):
        return round(os.path.getsize(file_path) / (1024 * 1024), 2)
    return 0

def main():
    """Fonction principale"""
    print("üé¨ Optimiseur de Vid√©os pour Portfolio")
    print("=" * 50)
    
    # V√©rifier FFmpeg
    if not check_ffmpeg():
        print("‚ùå FFmpeg n'est pas install√© ou n'est pas dans le PATH")
        print("üì• Installez FFmpeg depuis: https://ffmpeg.org/download.html")
        return
    
    # Vid√©os attendues
    expected_videos = [
        "stock_prediction.mp4",
        "house_price.mp4", 
        "face_recognition.mp4",
        "movie_recommendation.mp4"
    ]
    
    # Cr√©er le dossier optimized s'il n'existe pas
    optimized_dir = Path("optimized_videos")
    optimized_dir.mkdir(exist_ok=True)
    
    print(f"üìÅ Dossier d'optimisation: {optimized_dir}")
    print()
    
    # Traiter chaque vid√©o
    for video_name in expected_videos:
        input_path = Path(video_name)
        
        if not input_path.exists():
            print(f"‚ö†Ô∏è  Vid√©o non trouv√©e: {video_name}")
            continue
        
        output_path = optimized_dir / f"optimized_{video_name}"
        
        # Afficher les informations de la vid√©o originale
        original_size = get_file_size_mb(input_path)
        print(f"üìπ {video_name}")
        print(f"   Taille originale: {original_size} MB")
        
        # Optimiser la vid√©o
        if optimize_video(str(input_path), str(output_path)):
            optimized_size = get_file_size_mb(output_path)
            reduction = round((original_size - optimized_size) / original_size * 100, 1)
            print(f"   Taille optimis√©e: {optimized_size} MB")
            print(f"   R√©duction: {reduction}%")
        else:
            print(f"   ‚ùå √âchec de l'optimisation")
        
        print()
    
    print("üéâ Optimisation termin√©e!")
    print(f"üìÇ Vid√©os optimis√©es dans: {optimized_dir}")
    print()
    print("üí° Conseils:")
    print("   - Remplacez les vid√©os originales par les optimis√©es")
    print("   - V√©rifiez la qualit√© avant de remplacer")
    print("   - Les vid√©os optimis√©es sont pr√™tes pour le web")

if __name__ == "__main__":
    main()
